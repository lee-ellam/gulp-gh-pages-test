{"version":3,"sources":["head.js"],"names":["window","document","undefined","is","obj","type","testRunner","featureNames","feature","aliasIdx","result","nameIdx","featureName","featureNameSplit","featureIdx","tests","name","push","toLowerCase","options","aliases","length","fn","split","Modernizr","Boolean","classes","join","setClasses","className","docElement","classPrefix","_config","isSVG","baseVal","enableJSClass","reJS","RegExp","replace","enableClasses","contains","str","substr","indexOf","createElement","arguments","createElementNS","call","apply","getBody","body","fake","injectElementWithStyles","rule","callback","nodes","testnames","style","ret","node","docOverflow","mod","div","parseInt","id","appendChild","styleSheet","cssText","createTextNode","background","overflow","parentNode","removeChild","offsetHeight","domToCSS","m1","nativeTestProps","props","value","i","CSS","supports","conditionText","getComputedStyle","position","cssToDOM","m2","toUpperCase","testProps","prefixed","skipValueTest","cleanElems","afterInit","mStyle","modElem","propsLength","prop","before","elems","shift","e","fnBind","that","testDOMProps","elem","item","testPropsAll","ucProp","charAt","slice","cssomPrefixes","testAllProps","ModernizrProto","_version","usePrefixes","_q","on","test","cb","self","this","setTimeout","addTest","addAsyncTest","prototype","documentElement","nodeName","omPrefixes","_cssomPrefixes","unshift","domPrefixes","_domPrefixes","navigator","userAgent","testStyles","newSyntax","oldSyntax","usePrefix","mq","offsetLeft","createSVGRect","docClass"],"mappings":"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","file":"head.min.js","sourcesContent":["/*!\n * modernizr v3.0.0-alpha.4\n * Build http://modernizr.com/download/#-cssanimations-csstransforms-csstransforms3d-csstransitions-flexbox-flexboxlegacy-svg-dontmin\n *\n * Copyright (c)\n *  Faruk Ates\n *  Paul Irish\n *  Alex Sexton\n *  Ryan Seddon\n *  Alexander Farkas\n *  Patrick Kettner\n *  Stu Cox\n *  Richard Herrera\n\n * MIT License\n */\n\n/*\n * Modernizr tests which native CSS3 and HTML5 features are available in the\n * current UA and makes the results available to you in two ways: as properties on\n * a global `Modernizr` object, and as classes on the `<html>` element. This\n * information allows you to progressively enhance your pages with a granular level\n * of control over the experience.\n*/\n\n;(function(window, document, undefined){\n  var tests = [];\n  \n\n  var ModernizrProto = {\n    // The current version, dummy\n    _version: '3.0.0-alpha.4',\n\n    // Any settings that don't work as separate modules\n    // can go in here as configuration.\n    _config: {\n      'classPrefix' : '',\n      'enableClasses' : true,\n      'enableJSClass' : true,\n      'usePrefixes' : true\n    },\n\n    // Queue of tests\n    _q: [],\n\n    // Stub these for people who are listening\n    on: function( test, cb ) {\n      // I don't really think people should do this, but we can\n      // safe guard it a bit.\n      // -- NOTE:: this gets WAY overridden in src/addTest for\n      // actual async tests. This is in case people listen to\n      // synchronous tests. I would leave it out, but the code\n      // to *disallow* sync tests in the real version of this\n      // function is actually larger than this.\n      var self = this;\n      setTimeout(function() {\n        cb(self[test]);\n      }, 0);\n    },\n\n    addTest: function( name, fn, options ) {\n      tests.push({name : name, fn : fn, options : options });\n    },\n\n    addAsyncTest: function (fn) {\n      tests.push({name : null, fn : fn});\n    }\n  };\n\n  \n\n  // Fake some of Object.create\n  // so we can force non test results\n  // to be non \"own\" properties.\n  var Modernizr = function(){};\n  Modernizr.prototype = ModernizrProto;\n\n  // Leak modernizr globally when you `require` it\n  // rather than force it here.\n  // Overwrite name so constructor name is nicer :D\n  Modernizr = new Modernizr();\n\n  \n\n  var classes = [];\n  \n\n  /**\n   * is returns a boolean for if typeof obj is exactly type.\n   */\n  function is( obj, type ) {\n    return typeof obj === type;\n  }\n  ;\n\n  // Run through all tests and detect their support in the current UA.\n  function testRunner() {\n    var featureNames;\n    var feature;\n    var aliasIdx;\n    var result;\n    var nameIdx;\n    var featureName;\n    var featureNameSplit;\n\n    for ( var featureIdx in tests ) {\n      featureNames = [];\n      feature = tests[featureIdx];\n      // run the test, throw the return value into the Modernizr,\n      //   then based on that boolean, define an appropriate className\n      //   and push it into an array of classes we'll join later.\n      //\n      //   If there is no name, it's an 'async' test that is run,\n      //   but not directly added to the object. That should\n      //   be done with a post-run addTest call.\n      if ( feature.name ) {\n        featureNames.push(feature.name.toLowerCase());\n\n        if (feature.options && feature.options.aliases && feature.options.aliases.length) {\n          // Add all the aliases into the names list\n          for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {\n            featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());\n          }\n        }\n      }\n\n      // Run the test, or use the raw value if it's not a function\n      result = is(feature.fn, 'function') ? feature.fn() : feature.fn;\n\n\n      // Set each of the names on the Modernizr object\n      for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {\n        featureName = featureNames[nameIdx];\n        // Support dot properties as sub tests. We don't do checking to make sure\n        // that the implied parent tests have been added. You must call them in\n        // order (either in the test, or make the parent test a dependency).\n        //\n        // Cap it to TWO to make the logic simple and because who needs that kind of subtesting\n        // hashtag famous last words\n        featureNameSplit = featureName.split('.');\n\n        if (featureNameSplit.length === 1) {\n          Modernizr[featureNameSplit[0]] = result;\n        } else {\n          // cast to a Boolean, if not one already\n          /* jshint -W053 */\n          if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n            Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n          }\n\n          Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;\n        }\n\n        classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));\n      }\n    }\n  }\n\n  ;\n\n  var docElement = document.documentElement;\n  \n\n  var isSVG = docElement.nodeName.toLowerCase() === 'svg';\n  \n\n  // Pass in an and array of class names, e.g.:\n  //  ['no-webp', 'borderradius', ...]\n  function setClasses( classes ) {\n    var className = docElement.className;\n    var classPrefix = Modernizr._config.classPrefix || '';\n\n    if (isSVG) {\n      className = className.baseVal;\n    }\n\n    // Change `no-js` to `js` (we do this independently of the `enableClasses`\n    // option)\n    // Handle classPrefix on this too\n    if(Modernizr._config.enableJSClass) {\n      var reJS = new RegExp('(^|\\\\s)'+classPrefix+'no-js(\\\\s|$)');\n      className = className.replace(reJS, '$1'+classPrefix+'js$2');\n    }\n\n    if(Modernizr._config.enableClasses) {\n      // Add the new classes\n      className += ' ' + classPrefix + classes.join(' ' + classPrefix);\n      isSVG ? docElement.className.baseVal = className : docElement.className = className;\n    }\n\n  }\n\n  ;\n\n  // Following spec is to expose vendor-specific style properties as:\n  //   elem.style.WebkitBorderRadius\n  // and the following would be incorrect:\n  //   elem.style.webkitBorderRadius\n\n  // Webkit ghosts their properties in lowercase but Opera & Moz do not.\n  // Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+\n  //   erik.eae.net/archives/2008/03/10/21.48.10/\n\n  // More here: github.com/Modernizr/Modernizr/issues/issue/21\n  var omPrefixes = 'Moz O ms Webkit';\n  \n\n  var cssomPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.split(' ') : []);\n  ModernizrProto._cssomPrefixes = cssomPrefixes;\n  \n\n  /**\n   * contains returns a boolean for if substr is found within str.\n   */\n  function contains( str, substr ) {\n    return !!~('' + str).indexOf(substr);\n  }\n\n  ;\n\n  function createElement() {\n    if (typeof document.createElement !== 'function') {\n      // This is the case in IE7, where the type of createElement is \"object\".\n      // For this reason, we cannot call apply() as Object is not a Function.\n      return document.createElement(arguments[0]);\n    } else if (isSVG) {\n      return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);\n    } else {\n      return document.createElement.apply(document, arguments);\n    }\n  }\n\n  ;\n\n  /**\n   * Create our \"modernizr\" element that we do most feature tests on.\n   */\n  var modElem = {\n    elem : createElement('modernizr')\n  };\n\n  // Clean up this element\n  Modernizr._q.push(function() {\n    delete modElem.elem;\n  });\n\n  \n\n  var mStyle = {\n    style : modElem.elem.style\n  };\n\n  // kill ref for gc, must happen before\n  // mod.elem is removed, so we unshift on to\n  // the front of the queue.\n  Modernizr._q.unshift(function() {\n    delete mStyle.style;\n  });\n\n  \n\n  function getBody() {\n    // After page load injecting a fake body doesn't work so check if body exists\n    var body = document.body;\n\n    if(!body) {\n      // Can't use the real body create a fake one.\n      body = createElement(isSVG ? 'svg' : 'body');\n      body.fake = true;\n    }\n\n    return body;\n  }\n\n  ;\n\n  // Inject element with style element and some CSS rules\n  function injectElementWithStyles( rule, callback, nodes, testnames ) {\n    var mod = 'modernizr';\n    var style;\n    var ret;\n    var node;\n    var docOverflow;\n    var div = createElement('div');\n    var body = getBody();\n\n    if ( parseInt(nodes, 10) ) {\n      // In order not to give false positives we create a node for each test\n      // This also allows the method to scale for unspecified uses\n      while ( nodes-- ) {\n        node = createElement('div');\n        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n        div.appendChild(node);\n      }\n    }\n\n    style = createElement('style');\n    style.type = 'text/css';\n    style.id = 's' + mod;\n\n    // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n    // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n    (!body.fake ? div : body).appendChild(style);\n    body.appendChild(div);\n\n    if (style.styleSheet) {\n      style.styleSheet.cssText = rule;\n    } else {\n      style.appendChild(document.createTextNode(rule));\n    }\n    div.id = mod;\n\n    if ( body.fake ) {\n      //avoid crashing IE8, if background image is used\n      body.style.background = '';\n      //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\n      body.style.overflow = 'hidden';\n      docOverflow = docElement.style.overflow;\n      docElement.style.overflow = 'hidden';\n      docElement.appendChild(body);\n    }\n\n    ret = callback(div, rule);\n    // If this is done after page load we don't want to remove the body so check if body exists\n    if ( body.fake ) {\n      body.parentNode.removeChild(body);\n      docElement.style.overflow = docOverflow;\n      // Trigger layout so kinetic scrolling isn't disabled in iOS6+\n      docElement.offsetHeight;\n    } else {\n      div.parentNode.removeChild(div);\n    }\n\n    return !!ret;\n\n  }\n\n  ;\n\n  // Helper function for converting camelCase to kebab-case,\n  // e.g. boxSizing -> box-sizing\n  function domToCSS( name ) {\n    return name.replace(/([A-Z])/g, function(str, m1) {\n      return '-' + m1.toLowerCase();\n    }).replace(/^ms-/, '-ms-');\n  }\n  ;\n\n  // Function to allow us to use native feature detection functionality if available.\n  // Accepts a list of property names and a single value\n  // Returns `undefined` if native detection not available\n  function nativeTestProps ( props, value ) {\n    var i = props.length;\n    // Start with the JS API: http://www.w3.org/TR/css3-conditional/#the-css-interface\n    if ('CSS' in window && 'supports' in window.CSS) {\n      // Try every prefixed variant of the property\n      while (i--) {\n        if (window.CSS.supports(domToCSS(props[i]), value)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    // Otherwise fall back to at-rule (for Opera 12.x)\n    else if ('CSSSupportsRule' in window) {\n      // Build a condition string for every prefixed variant\n      var conditionText = [];\n      while (i--) {\n        conditionText.push('(' + domToCSS(props[i]) + ':' + value + ')');\n      }\n      conditionText = conditionText.join(' or ');\n      return injectElementWithStyles('@supports (' + conditionText + ') { #modernizr { position: absolute; } }', function( node ) {\n        return getComputedStyle(node, null).position == 'absolute';\n      });\n    }\n    return undefined;\n  }\n  ;\n\n  // Helper function for converting kebab-case to camelCase,\n  // e.g. box-sizing -> boxSizing\n  function cssToDOM( name ) {\n    return name.replace(/([a-z])-([a-z])/g, function(str, m1, m2) {\n      return m1 + m2.toUpperCase();\n    }).replace(/^-/, '');\n  }\n  ;\n\n  // testProps is a generic CSS / DOM property test.\n\n  // In testing support for a given CSS property, it's legit to test:\n  //    `elem.style[styleName] !== undefined`\n  // If the property is supported it will return an empty string,\n  // if unsupported it will return undefined.\n\n  // We'll take advantage of this quick test and skip setting a style\n  // on our modernizr element, but instead just testing undefined vs\n  // empty string.\n\n  // Property names can be provided in either camelCase or kebab-case.\n\n  function testProps( props, prefixed, value, skipValueTest ) {\n    skipValueTest = is(skipValueTest, 'undefined') ? false : skipValueTest;\n\n    // Try native detect first\n    if (!is(value, 'undefined')) {\n      var result = nativeTestProps(props, value);\n      if(!is(result, 'undefined')) {\n        return result;\n      }\n    }\n\n    // Otherwise do it properly\n    var afterInit, i, propsLength, prop, before;\n\n    // If we don't have a style element, that means we're running async or after\n    // the core tests, so we'll need to create our own elements to use\n\n    // inside of an SVG element, in certain browsers, the `style` element is only\n    // defined for valid tags. Therefore, if `modernizr` does not have one, we\n    // fall back to a less used element and hope for the best.\n    var elems = ['modernizr', 'tspan'];\n    while ( !mStyle.style ) {\n      afterInit = true;\n      mStyle.modElem = createElement(elems.shift());\n      mStyle.style = mStyle.modElem.style;\n    }\n\n    // Delete the objects if we created them.\n    function cleanElems() {\n      if (afterInit) {\n        delete mStyle.style;\n        delete mStyle.modElem;\n      }\n    }\n\n    propsLength = props.length;\n    for ( i = 0; i < propsLength; i++ ) {\n      prop = props[i];\n      before = mStyle.style[prop];\n\n      if (contains(prop, '-')) {\n        prop = cssToDOM(prop);\n      }\n\n      if ( mStyle.style[prop] !== undefined ) {\n\n        // If value to test has been passed in, do a set-and-check test.\n        // 0 (integer) is a valid property value, so check that `value` isn't\n        // undefined, rather than just checking it's truthy.\n        if (!skipValueTest && !is(value, 'undefined')) {\n\n          // Needs a try catch block because of old IE. This is slow, but will\n          // be avoided in most cases because `skipValueTest` will be used.\n          try {\n            mStyle.style[prop] = value;\n          } catch (e) {}\n\n          // If the property value has changed, we assume the value used is\n          // supported. If `value` is empty string, it'll fail here (because\n          // it hasn't changed), which matches how browsers have implemented\n          // CSS.supports()\n          if (mStyle.style[prop] != before) {\n            cleanElems();\n            return prefixed == 'pfx' ? prop : true;\n          }\n        }\n        // Otherwise just return true, or the property name if this is a\n        // `prefixed()` call\n        else {\n          cleanElems();\n          return prefixed == 'pfx' ? prop : true;\n        }\n      }\n    }\n    cleanElems();\n    return false;\n  }\n\n  ;\n\n  var domPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.toLowerCase().split(' ') : []);\n  ModernizrProto._domPrefixes = domPrefixes;\n  \n\n  // Change the function's scope.\n  function fnBind(fn, that) {\n    return function() {\n      return fn.apply(that, arguments);\n    };\n  }\n\n  ;\n\n  /**\n   * testDOMProps is a generic DOM property test; if a browser supports\n   *   a certain property, it won't return undefined for it.\n   */\n  function testDOMProps( props, obj, elem ) {\n    var item;\n\n    for ( var i in props ) {\n      if ( props[i] in obj ) {\n\n        // return the property name as a string\n        if (elem === false) return props[i];\n\n        item = obj[props[i]];\n\n        // let's bind a function\n        if (is(item, 'function')) {\n          // bind to obj unless overriden\n          return fnBind(item, elem || obj);\n        }\n\n        // return the unbound function or obj or value\n        return item;\n      }\n    }\n    return false;\n  }\n\n  ;\n\n  /**\n   * testPropsAll tests a list of DOM properties we want to check against.\n   *     We specify literally ALL possible (known and/or likely) properties on\n   *     the element including the non-vendor prefixed one, for forward-\n   *     compatibility.\n   */\n  function testPropsAll( prop, prefixed, elem, value, skipValueTest ) {\n\n    var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),\n    props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');\n\n    // did they call .prefixed('boxSizing') or are we just testing a prop?\n    if(is(prefixed, 'string') || is(prefixed, 'undefined')) {\n      return testProps(props, prefixed, value, skipValueTest);\n\n      // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])\n    } else {\n      props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');\n      return testDOMProps(props, prefixed, elem);\n    }\n  }\n\n  // Modernizr.testAllProps() investigates whether a given style property,\n  //     or any of its vendor-prefixed variants, is recognized\n  // Note that the property names must be provided in the camelCase variant.\n  // Modernizr.testAllProps('boxSizing')\n  ModernizrProto.testAllProps = testPropsAll;\n\n  \n\n  /**\n   * testAllProps determines whether a given CSS property, in some prefixed\n   * form, is supported by the browser. It can optionally be given a value; in\n   * which case testAllProps will only return true if the browser supports that\n   * value for the named property; this latter case will use native detection\n   * (via window.CSS.supports) if available. A boolean can be passed as a 3rd\n   * parameter to skip the value check when native detection isn't available,\n   * to improve performance when simply testing for support of a property.\n   *\n   * @param prop - String naming the property to test (either camelCase or\n   *               kebab-case)\n   * @param value - [optional] String of the value to test\n   * @param skipValueTest - [optional] Whether to skip testing that the value\n   *                        is supported when using non-native detection\n   *                        (default: false)\n   */\n  function testAllProps (prop, value, skipValueTest) {\n    return testPropsAll(prop, undefined, undefined, value, skipValueTest);\n  }\n  ModernizrProto.testAllProps = testAllProps;\n  \n/*!\n{\n  \"name\": \"CSS Transforms\",\n  \"property\": \"csstransforms\",\n  \"caniuse\": \"transforms2d\",\n  \"tags\": [\"css\"]\n}\n!*/\n\n  Modernizr.addTest('csstransforms', function() {\n    // Android < 3.0 is buggy, so we sniff and blacklist\n    // http://git.io/hHzL7w\n    return navigator.userAgent.indexOf('Android 2.') === -1 &&\n           testAllProps('transform', 'scale(1)', true);\n  });\n\n\n  var testStyles = ModernizrProto.testStyles = injectElementWithStyles;\n  \n/*!\n{\n  \"name\": \"CSS Supports\",\n  \"property\": \"supports\",\n  \"caniuse\": \"css-featurequeries\",\n  \"tags\": [\"css\"],\n  \"builderAliases\": [\"css_supports\"],\n  \"notes\": [{\n    \"name\": \"W3 Spec\",\n    \"href\": \"http://dev.w3.org/csswg/css3-conditional/#at-supports\"\n  },{\n    \"name\": \"Related Github Issue\",\n    \"href\": \"github.com/Modernizr/Modernizr/issues/648\"\n  },{\n    \"name\": \"W3 Info\",\n    \"href\": \"http://dev.w3.org/csswg/css3-conditional/#the-csssupportsrule-interface\"\n  }]\n}\n!*/\n\n  var newSyntax = 'CSS' in window && 'supports' in window.CSS;\n  var oldSyntax = 'supportsCSS' in window;\n  Modernizr.addTest('supports', newSyntax || oldSyntax);\n\n/*!\n{\n  \"name\": \"CSS Transforms 3D\",\n  \"property\": \"csstransforms3d\",\n  \"caniuse\": \"transforms3d\",\n  \"tags\": [\"css\"],\n  \"warnings\": [\n    \"Chrome may occassionally fail this test on some systems; more info: https://code.google.com/p/chromium/issues/detail?id=129004\"\n  ]\n}\n!*/\n\n  Modernizr.addTest('csstransforms3d', function() {\n    var ret = !!testAllProps('perspective', '1px', true);\n    var usePrefix = Modernizr._config.usePrefixes;\n\n    // Webkit's 3D transforms are passed off to the browser's own graphics renderer.\n    //   It works fine in Safari on Leopard and Snow Leopard, but not in Chrome in\n    //   some conditions. As a result, Webkit typically recognizes the syntax but\n    //   will sometimes throw a false positive, thus we must do a more thorough check:\n    if ( ret && (!usePrefix || 'webkitPerspective' in docElement.style )) {\n      var mq;\n      // Use CSS Conditional Rules if available\n      if (Modernizr.supports) {\n        mq = '@supports (perspective: 1px)';\n      } else {\n        // Otherwise, Webkit allows this media query to succeed only if the feature is enabled.\n        // `@media (transform-3d),(-webkit-transform-3d){ ... }`\n        mq = '@media (transform-3d)';\n        if (usePrefix ) mq += ',(-webkit-transform-3d)';\n      }\n      // If loaded inside the body tag and the test element inherits any padding, margin or borders it will fail #740\n      mq += '{#modernizr{left:9px;position:absolute;height:5px;margin:0;padding:0;border:0}}';\n\n      testStyles(mq, function( elem ) {\n        ret = elem.offsetLeft === 9 && elem.offsetHeight === 5;\n      });\n    }\n\n    return ret;\n  });\n\n/*!\n{\n  \"name\": \"CSS Transitions\",\n  \"property\": \"csstransitions\",\n  \"caniuse\": \"css-transitions\",\n  \"tags\": [\"css\"]\n}\n!*/\n\n  Modernizr.addTest('csstransitions', testAllProps('transition', 'all', true));\n\n/*!\n{\n  \"name\": \"CSS Animations\",\n  \"property\": \"cssanimations\",\n  \"caniuse\": \"css-animation\",\n  \"polyfills\": [\"transformie\", \"csssandpaper\"],\n  \"tags\": [\"css\"],\n  \"warnings\": [\"Android < 4 will pass this test, but can only animate a single property at a time\"],\n  \"notes\": [{\n    \"name\" : \"Article: 'Dispelling the Android CSS animation myths'\",\n    \"href\": \"http://goo.gl/OGw5Gm\"\n  }]\n}\n!*/\n/* DOC\nDetects whether or not elements can be animated using CSS\n*/\n\n  Modernizr.addTest('cssanimations', testAllProps('animationName', 'a', true));\n\n/*!\n{\n  \"name\": \"Flexbox\",\n  \"property\": \"flexbox\",\n  \"caniuse\": \"flexbox\",\n  \"tags\": [\"css\"],\n  \"notes\": [{\n    \"name\": \"The _new_ flexbox\",\n    \"href\": \"http://dev.w3.org/csswg/css3-flexbox\"\n  }],\n  \"warnings\": [\n    \"A `true` result for this detect does not imply that the `flex-wrap` property is supported; see the `flexwrap` detect.\"\n  ]\n}\n!*/\n/* DOC\nDetects support for the Flexible Box Layout model, a.k.a. Flexbox, which allows easy manipulation of layout order and sizing within a container.\n*/\n\n  Modernizr.addTest('flexbox', testAllProps('flexBasis', '1px', true));\n\n/*!\n{\n  \"name\": \"Flexbox (legacy)\",\n  \"property\": \"flexboxlegacy\",\n  \"tags\": [\"css\"],\n  \"polyfills\": [\"flexie\"],\n  \"notes\": [{\n    \"name\": \"The _old_ flexbox\",\n    \"href\": \"http://www.w3.org/TR/2009/WD-css3-flexbox-20090723/\"\n  }]\n}\n!*/\n\n  Modernizr.addTest('flexboxlegacy', testAllProps('boxDirection', 'reverse', true));\n\n/*!\n{\n  \"name\": \"SVG\",\n  \"property\": \"svg\",\n  \"caniuse\": \"svg\",\n  \"tags\": [\"svg\"],\n  \"authors\": [\"Erik Dahlstrom\"],\n  \"polyfills\": [\n    \"svgweb\",\n    \"raphael\",\n    \"amplesdk\",\n    \"canvg\",\n    \"svg-boilerplate\",\n    \"sie\",\n    \"dojogfx\",\n    \"fabricjs\"\n  ]\n}\n!*/\n/* DOC\nDetects support for SVG in `<embed>` or `<object>` elements.\n*/\n\n  Modernizr.addTest('svg', !!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect);\n\n\n  // Run each test\n  testRunner();\n\n  // Remove the \"no-js\" class if it exists\n  setClasses(classes);\n\n  delete ModernizrProto.addTest;\n  delete ModernizrProto.addAsyncTest;\n\n  // Run the things that are supposed to run after the tests\n  for (var i = 0; i < Modernizr._q.length; i++) {\n    Modernizr._q[i]();\n  }\n\n  // Leak Modernizr namespace\n  window.Modernizr = Modernizr;\n\n\n;\n\n})(window, document);\n;(function(window, document, undefined){\n\tvar docClass = document.documentElement.className;\n\tdocument.documentElement.className = docClass.split('no-js').join('js');\n})(window, document);\n\n"],"sourceRoot":"/source/"}